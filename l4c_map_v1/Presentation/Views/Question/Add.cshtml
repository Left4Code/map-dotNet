@model Presentation.Models.QuestionVm

@{
    ViewBag.Title = "Add";
    var test = (Presentation.Models.TestVm)HttpContext.Current.Session["testSelected"];
    var pourcentage_bar = ViewBag.numberOfQuestion * 10;
}

<h2>Adding Question to @test.name</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Question n=@ViewBag.numberOfQuestion (max 5)</h4>
        <div class="progress">
            <div class="progress-bar progress-bar-green" role="progressbar" aria-valuenow="0" aria-valuemax="100" style="width:@pourcentage_bar%">

            </div>
        </div>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.task, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.task, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.task, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.syn1, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.syn1, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.syn1, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.syn2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.syn2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.syn2, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.syn3, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.syn3, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.syn3, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.correct, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.numberChosed, new { htmlAttributes = new { @class = "btn dropdown-toggle btn-primary" } })
                @Html.ValidationMessageFor(model => model.numberChosed, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Add this question to test" class="btn btn-default" />
            </div>
        </div>
    </div>
}